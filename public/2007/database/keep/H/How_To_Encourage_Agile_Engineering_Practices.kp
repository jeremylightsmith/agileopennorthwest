³1version³21³2ts³21170262970³2ip³267.132.134.6³2name³2text_default³2data³2summary³3*³3text³3This session was an informal conversation about encouraging agile engineering practices. The host began by describing the situation in his organization where scrum had been adopted successfully, however there was some resistance to adopting Test Driven Development (TDD). A number of participants also indicated that they were not practicing TDD either. One participant talked about how they initially started doing TDD, but soon determined that it was too difficult to do with their existing legacy system. He put forth the hypothesis that TDD is often nearly impossible to do with legacy code because adding tests often results in navigating a never-ending chain of dependencies that results in the effort taking so long that the cost outweighs the benefit.

We then tried listing out some of the engineering practices that could be considered "agile," and we conducted and unscientific poll of the biased audience asking how many did each practice. The list included:
* Test Driven Development (collaborative programming): ~5% do this
* Refactoring: ~100% responded that they do this, but we also determined that if we talked about it more that we'd likely discover that "refactoring" has many meanings, and that if we're really talking about continuous refactoring, far fewer people actually that.
* Continuous Integration: 100%
* Sustainable pace (no involuntary overtime): ~30%
* Defined coding standards: 100%
* Design spikes when necessary (we didn't poll this)
* Automated Unit Testing: ~80%
* Automated Functional Testing (tests that : ~10%
* Automated Acceptance Testing (defined as customer facing tests): ~5%
³3newauthor³31³3minor³30³2host³267.132.134.6³2username³2³2revision³21³2id³2111³2tscreate³21170262970³2keepts³21170264001